import telebot
from telebot import types
import g4f
import requests
import pyttsx3
import speech_recognition as sr
import soundfile as sf

g4f.logging = True # enable logging
g4f.check_version = False # Disable automatic version checking

bot = telebot.TeleBot('API_KEY')

engine = pyttsx3.init()

@bot.message_handler(commands=['start'])
def start(message):

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
    markup.add(btn1)
    bot.send_message(message.from_user.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—à–Ω–∏–∫!", reply_markup=markup)

@bot.message_handler(content_types=['text'])
def get_text_messages(message):

    if message.text:        
        response = g4f.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": f'{message.text}'}],
            stream=True,
        )      
        answer = ""
        for s in response:
            # print(message, flush=True, end='')
            answer += s
        print(answer)
        # engine.say(answer)

        # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Ä–µ—á—å
        engine.save_to_file(f'{answer}', 'answer.wav')
        engine.runAndWait()  
        bot.send_message(message.from_user.id, f'{answer}', parse_mode='Markdown') # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –≤ —á–∞—Ç
        bot.send_document(message.from_user.id, document=open("answer.wav", "rb"))
        # bot.send_audio(message.from_user.id, audio=open("answer.wav", "rb"))

    #–æ—Ç–≤–µ—Ç –±–æ—Ç–∞  
    #     markup = types.ReplyKeyboardMarkup(resize_keyboard=True) #—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
    #     btn1 = types.KeyboardButton('–ö–∞–∫ —Å—Ç–∞—Ç—å –∞–≤—Ç–æ—Ä–æ–º –Ω–∞ –•–∞–±—Ä–µ?')
    #     btn2 = types.KeyboardButton('–ü—Ä–∞–≤–∏–ª–∞ —Å–∞–π—Ç–∞')
    #     btn3 = types.KeyboardButton('–°–æ–≤–µ—Ç—ã –ø–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –ø—É–±–ª–∏–∫–∞—Ü–∏–∏')
    #     markup.add(btn1, btn2, btn3)
    #     bot.send_message(message.from_user.id, '‚ùì –ó–∞–¥–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å', reply_markup=markup) #–æ—Ç–≤–µ—Ç –±–æ—Ç–∞


    # elif message.text == '–ö–∞–∫ —Å—Ç–∞—Ç—å –∞–≤—Ç–æ—Ä–æ–º –Ω–∞ –•–∞–±—Ä–µ?':
    #     bot.send_message(message.from_user.id, '[—Å—Å—ã–ª–∫–∞](https://habr.com/ru/sandbox/start/)', parse_mode='Markdown')

    # elif message.text == '–ü—Ä–∞–≤–∏–ª–∞ —Å–∞–π—Ç–∞':
    #     bot.send_message(message.from_user.id, '–ü—Ä–æ—á–∏—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —Å–∞–π—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ ' + '[—Å—Å—ã–ª–∫–µ](https://habr.com/ru/docs/help/rules/)', parse_mode='Markdown')

    # elif message.text == '–°–æ–≤–µ—Ç—ã –ø–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –ø—É–±–ª–∏–∫–∞—Ü–∏–∏':
    #     bot.send_message(message.from_user.id, '–ü–æ–¥—Ä–æ–±–Ω–æ –ø—Ä–æ —Å–æ–≤–µ—Ç—ã –ø–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–æ ' + '[—Å—Å—ã–ª–∫–µ](https://habr.com/ru/docs/companies/design/)', parse_mode='Markdown')
# from pydub import AudioSegment

# # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º OGG-—Ñ–∞–π–ª –≤ WAV-—Ñ–æ—Ä–º–∞—Ç
# def convert_ogg_to_wav(ogg_file, wav_file):
#     audio = AudioSegment.from_file(ogg_file, format='ogg')
#     audio.export(wav_file, format='wav')

# # –ü—É—Ç—å –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É OGG-—Ñ–∞–π–ª—É
# ogg_file_path = 'voice_message.ogg'
# # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è WAV-—Ñ–∞–π–ª–∞
# wav_file_path = 'voice_message.wav'

# # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º OGG-—Ñ–∞–π–ª –≤ WAV-—Ñ–æ—Ä–º–∞—Ç
# convert_ogg_to_wav(ogg_file_path, wav_file_path)

from pydub import AudioSegment
    
global_text = ''

@bot.message_handler(content_types=['voice'])
def handle_voice_message(message):
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    voice = message.voice
    file_info = bot.get_file(voice.file_id)
    file = bot.download_file(file_info.file_path)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫
    with open('voice_answer.wav', 'wb') as f:
        f.write(file)
#     # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å –∏–∑ —Ñ–∞–π–ª–∞
#     recognizer = sr.Recognizer() 
    
#     with sr.AudioFile('voice_message.wav') as source:
#         audio = recognizer.record(source)
#     try:
#         # –ò—Å–ø–æ–ª—å–∑—É–µ–º Google Web Speech API –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
#         text = recognizer.recognize_google(audio, language='ru-RU')
#         bot.reply_to(message, text)
#     except sr.UnknownValueError:
#         bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
#     except sr.RequestError as e:
#         bot.reply_to(message, "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏; {0}".format(e))
    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –æ–±—ä–µ–∫—Ç–∞ Recognizer

    # –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
    input_file = 'voice_answer.wav'

    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    output_file = 'voice_answer.flac'

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
    audio_data, sample_rate = sf.read(input_file)

    # –ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (FLAC)
    sf.write(output_file, audio_data, sample_rate, format='FLAC')



    r = sr.Recognizer()
    # –û—Ç–∫—Ä—ã—Ç–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ —Å –ø–æ–º–æ—â—å—é AudioFile
    with sr.AudioFile('voice_answer.flac') as source:
        # –ß—Ç–µ–Ω–∏–µ –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
        audio_data = r.record(source)
        # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
        text = r.recognize_google(audio_data, language='ru')
        # –í—ã–≤–æ–¥ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        print(text)
        global_text = text
        bot.send_message(message.from_user.id, f'{text}', parse_mode='Markdown') # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –≤ —á–∞—Ç

        
        response2 = g4f.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": f'{global_text}'}],
            stream=True,
        )      
        answer2 = ""
        for ss in response2:
            # print(message, flush=True, end='')
            answer2 += ss
        bot.send_message(message.from_user.id, f'{answer2}', parse_mode='Markdown') # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –≤ —á–∞—Ç

bot.polling(none_stop=True, interval=0) 
#–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —á–∞—Å—Ç—å